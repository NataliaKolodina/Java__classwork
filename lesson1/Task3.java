// –î–∞–Ω –º–∞—Å—Å–∏–≤ nums = [3,2,2,3] –∏ —á–∏—Å–ª–æ val = 3.
// üìå –ï—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –µ—Å—Ç—å —á–∏—Å–ª–∞, —Ä–∞–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–Ω–æ–º—É, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏
// —ç—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞.–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ (–∏–ª–∏ –≤—Å–µ) —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
// –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ª–∏—á–Ω—ã –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Ä–∞–≤–Ω—ã –µ–º—É.

import java.util.Arrays;

public class Task3 {
  public static void main(String[] args) {
    int[] nums = { 5, 3, 2, 5, 0, -10, 2, 3, 5, 5, 5 };
    System.out.println(Arrays.toString(nums));
    moveToEnd(nums, 5);
    System.out.println(Arrays.toString(nums));
  }

  public static void moveToEnd(int[] arr, int num) {
    // –ò–¥–µ–º –ø–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É
    for (int i = 0; i < arr.length; i++) {
      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –∏—Å–∫–æ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      if (arr[i] == num) {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–Ω—Ü–∞
        int endIndex = arr.length - 1;

        // –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–º–µ–Ω—ã
        boolean isSwapped = false;
        // –ü–æ–∫–∞ –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Ü–∞ –ø—Ä–∞–≤–µ–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        while (endIndex > i) {
          // –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç, –Ω–µ—Ä–∞–≤–Ω—ã–π num
          if (arr[endIndex] != num) {
            // –ú–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏
            int temp = arr[i];
            arr[i] = arr[endIndex];
            arr[endIndex] = temp;
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –º—ã –∏—Ö –ø–æ–º–µ–Ω—è–ª–∏
            isSwapped = true;
            // –í—ã—Ö–æ–¥–∏–º –∏–∑ while
            break;
          }
          // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ü–∞ –±—ã–ª —Ä–∞–≤–µ–Ω num, —Ç–æ —Å–º–µ—â–∞–µ–º—Å—è –ª–µ–≤–µ–µ
          endIndex--;
        }
        // –ï—Å–ª–∏ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–µ–Ω—è–ª–∏
        if (!isSwapped)
          // –í—ã—Ö–æ–¥–∏–º –∏–∑ for
          break;
      }
    }
  }
}
