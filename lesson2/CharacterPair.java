// üìå –î–∞–Ω–æ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ N (>0) –∏ —Å–∏–º–≤–æ–ª—ã c1 –∏ c2.
// üìå –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω—ã N, –∫–æ—Ç–æ—Ä–∞—è
// —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ä–µ–¥—É—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ c1 –∏ c2, –Ω–∞—á–∏–Ω–∞—è —Å c1.

public class CharacterPair {
  public static void main(String[] args) {
    char c1 = 'a';
    char c2 = 'b';
    int count = 100000;

    long start = System.currentTimeMillis();
    System.out.println(characterPairSb(count, c1, c2));
    System.out.println(System.currentTimeMillis() - start);

    start = System.currentTimeMillis();
    System.out.println(characterPairStr(count, c1, c2));
    System.out.println(System.currentTimeMillis() - start);
}

public static String characterPairSb(int count, char char1, char char2) {
    StringBuilder sb = new StringBuilder(count);

    for (int i = 0; i < count / 2; i++) {
        sb.append(char1).append(char2);
    }

    return sb.toString();
}

public static String characterPairStr(int count, char char1, char char2) {
    String str = "";

    for (int i = 0; i < count / 2; i++) {
        str += Character.toString(char1) + Character.toString(char2);
    }

    return str;
}
}